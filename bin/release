#!/usr/bin/ruby
# -*- coding: utf-8 -*-

require 'fileutils'

$progDir = "/Users/seismo04/Documents/prog/"
$libDir = "/Users/seismo04/my_lib/"
$binDir = "/Users/seismo04/my_bin/"
$modDir = $libDir + "lib_modfile/"

def g_lib_or_bin?()
  pwd = Dir.pwd
  if pwd =~/^#{$progDir}lib/
    return "lib"
  elsif pwd =~/^#{$progDir}bin/
    return "bin"
  else
    return "__unknown_place__"
  end
end

# main

while true
  puts "バージョン名を入力してください"
  versionIn = gets.chomp
  puts "どのファイルをアップしますか？"
  targetIn = gets.chomp
  targetInArray = Dir.glob(targetIn.split(' ').join("\0"))
  puts "リンクを更新しますか？[y/n]"
  updateIn = gets.chomp
  puts "以下の条件で良いですか？"
  puts "version: #{versionIn}"
  puts "target: #{targetInArray.join(',')}"
  puts "link update: #{updateIn}"
  puts "#"
  puts "[y/n/q]"
  continue = gets.chomp
  if continue == "q"
    exit
  elsif continue == "y"
    break
  end
end
version = "__" + versionIn + "__"
update = updateIn
libOrBin = g_lib_or_bin?()
if libOrBin == "__unknown_place__"
  puts "i'm in neither lib nor bin"
else
  case libOrBin
  when "bin"
    targetDir = $binDir
  when "lib"
    targetDir = $libDir
  end
  targetInArray.each{ |_i|
    _extname = File.extname(_i)
    _targetName = targetDir + File.basename(_i,_extname) + version + _extname
    if File.exist?(_targetName)
      puts "#{_targetName} exsits"
      puts "are you sure to overwrite? [y/*]"
      _isOverWrite = gets.chomp!
      if _isOverWrite != "y"
        puts "i won't overwirte #{_targetName}"
        next
      end
    end
    FileUtils.cp(_i, _targetName)
    if update == "y"
      FileUtils.ln_sf(_targetName, targetDir + File.basename(_i))
    end
    if _extname == '.a'         # アーカイブファイルが1つのlibに1つしかかないと仮定している．
      Dir.glob(Dir.pwd + '/../src/*.mod').each{ |_j| # 同じような作業だから，メソッドを統一すべきかも
        _targetMod = $modDir + File.basename(_j,'.mod') + version + '.mod'
        FileUtils.cp(_j, _targetMod) # ファイルが存在してる場合は，既に上書きの有無が分かれている
        if update == "y"
          FileUtils.ln_sf(_targetMod, $modDir + File.basename(_j)) # ここも，メソッド統一すべきかな
        end
      }
    end
  }
end
